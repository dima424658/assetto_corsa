#pragma once

class ACClient
{
void ACClient::ACClient(Sim *isim);
void ACClient::~ACClient();
void ACClient::addCollisionEvent(NetCarStateProvider *netCar, float speed, const vec3f *worldPos, const vec3f *relPos);
void ACClient::addNetCar(NetCarStateProvider *nc);
void ACClient::addSplitToBest(std::vector<unsigned int> *splits, std::vector<unsigned int> *personalSplits, const unsigned int *sector, const unsigned int *time, const unsigned int *cuts);
void ACClient::askForP2Pvalue();
void ACClient::associate();
void ACClient::beginUpdateMode();
unsigned int ACClient::getBestLap(CarAvatar *car);
unsigned int ACClient::getBestSplit(const int *sector, const bool *isGlobal, CarAvatar *car);
CarAvatar *ACClient::getCarAvatarFromSessionID(unsigned __int8 sesid);
// std::vector<unsigned char> *__userpurge ACClient::getCarMD5@<eax>(@<ecx>, unsigned int a2@<ebx>, std::vector<unsigned char> *result, const std::wstring *unix_name);
unsigned int ACClient::getCarPosition(CarAvatar *car);
Lap *ACClient::getCurrentLap(Lap *result, CarAvatar *car);
RemoteSession *ACClient::getCurrentSession(RemoteSession *result);
int ACClient::getCurrentSessionIndex();
RemoteSessionResult *ACClient::getCurrentSessionResults();
VoteType ACClient::getCurrentVoteType();
CarAvatar *ACClient::getCurrentVotingTarget();
unsigned int ACClient::getInstanceBestLap(CarAvatar *car);
int ACClient::getLapCount(CarAvatar *car);
void ACClient::getLaps(CarAvatar *car, std::vector<Lap> *laps);
Lap *ACClient::getLastLap(Lap *result, CarAvatar *car);
unsigned int ACClient::getLastSplit(CarAvatar *car, const int *sector);
NetCarStateProvider *ACClient::getNetCarFromSessionID(unsigned __int8 id);
long double ACClient::getPhysicsTime();
int ACClient::getPing(CarAvatar *anAvatar);
char ACClient::getRemoteCarList(std::vector<ClientRemoteCarDef> *remoteCars);
int ACClient::getSessionCount();
int ACClient::getSessionIDFromCarAvatar(CarAvatar *anAvatar);
unsigned __int8 ACClient::getSessionIdFromCarAvatarID(int carAvatarID);
RemoteSession *ACClient::getSessionInfo(RemoteSession *result, int index);
long double ACClient::getSessionTimeLeft();
unsigned int ACClient::getSplit(CarAvatar *car, const int *sector);
long double ACClient::getTimetoWait();
double ACClient::getVotingMaxTime();
double ACClient::getVotingTimeLeft();
char ACClient::handleLocalAdminMessages(std::wstring msg);
// ClientHandshakeResult *__userpurge ACClient::handshakeTCP@<eax>(@<ecx>, unsigned int a2@<ebx>, ClientHandshakeResult *result);
bool ACClient::hasVoted();
bool ACClient::isAllowedToSendChatMessage();
bool ACClient::isBestSplit(const int *sector, const int *t, const bool *isGlobal, CarAvatar *car);
void ACClient::logMessage(const std::wstring *message);
void ACClient::onCollisionEvent(const OnCollisionEvent *ev);
void ACClient::onCollisionWithCar();
void ACClient::onDRSZoneReceived(UDPPacket *pak);
void ACClient::onLapCompleted(const OnLapCompletedEvent *ev);
void ACClient::onMessage(const UDPMessage *msg);
void ACClient::onMessageTCP(const UDPMessage *msg);
void ACClient::onNewSession(UDPPacket *pak, bool isHandShake);
void ACClient::onPhysicsStep(long double pt);
void ACClient::onRemoteLapCompleted(UDPPacket *pak);
void ACClient::onRemoteSectorSplit(UDPPacket *pak);
void ACClient::onRemoteSunAngleReceived(float angle);
void ACClient::onSectorSplit(const OnSectorSplitEvent *ev);
void ACClient::onSetupReceived(UDPPacket *pak);
void ACClient::onTyreCompoundChanged(const std::wstring *shortName);
void ACClient::onWelcomeMessageReceived(UDPPacket *pak);
void ACClient::renderHUD(float dt);
void ACClient::resetCurrentLaps();
void ACClient::sendCarPosition();
void ACClient::sendChat(const std::wstring *message);
void ACClient::sendVote(VoteType aVote, bool aVoteValue, int targetAvatarGUID);
void ACClient::shutdown();
void ACClient::storeSplitToLap(std::vector<unsigned int> *splits, std::vector<unsigned int> *personalSplits, std::vector<Lap> *laps, const unsigned int *laptime, const unsigned int *cuts);
void ACClient::update(float deltaT);
void ACClient::updateDamageReport();
void ACClient::updateQOS(long double pt);

};