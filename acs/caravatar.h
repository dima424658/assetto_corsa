#pragma once

class CarAvatar
{
std::wstring *CarAvatar::getCurrentSkin(std::wstring *result);
// void __userpurge CarAvatar::CarAvatar(@<ecx>, __m128 a2@<xmm3>, __m128 a3@<xmm4>, Sim *isim, const std::wstring *unixName, const std::wstring *config, const std::wstring *skin);
void CarAvatar::CarAvatar(Sim *isim, const std::wstring *unixName, const std::wstring *config, const std::wstring *skin, ICarPhysicsStateProvider *physicsStateProvider);
void CarAvatar::~CarAvatar();
void CarAvatar::armFirstLap();
void CarAvatar::checkACD();
void CarAvatar::cycleAbsMode(int value);
bool CarAvatar::cycleERSHeatCharging();
std::pair<int,std::wstring > *CarAvatar::cycleERSPower(std::pair<int,std::wstring > *result, int value);
int CarAvatar::cycleERSRecovery(int value);
int CarAvatar::cycleEngineBrake(int value);
void CarAvatar::cycleTcMode(int value);
void CarAvatar::forcePosition(const mat44f *matrix);
std::pair<unsigned int,unsigned int> *CarAvatar::getABSMode(std::pair<unsigned int,unsigned int> *result);
int CarAvatar::getAILapsToComplete();
DriverModel *CarAvatar::getActiveDriverModel();
bool CarAvatar::getAutoBlip();
bool CarAvatar::getAutoShifter();
double CarAvatar::getBallastKG();
CarColliderManager *CarAvatar::getColliderManager();
ICarControlsProvider *CarAvatar::getControlsProvider();
int CarAvatar::getCurrentCompoundIdealPressure(unsigned __int16 tyreIndex);
std::wstring *CarAvatar::getCurrentCompoundShortName(std::wstring *result);
int CarAvatar::getCurrentCompoundStaticPressure(unsigned __int16 tyreIndex);
void CarAvatar::getDistancesOnSpline(CarAvatar *car, float *frontDistance, float *backDistance);
std::pair<int,std::wstring > *CarAvatar::getERSPower(std::pair<int,std::wstring > *result);
double CarAvatar::getEdlOutLevel();
double CarAvatar::getFFMult();
double CarAvatar::getGraphicSteerDeg();
vec3f *CarAvatar::getGraphicsOffset(vec3f *result);
int CarAvatar::getGuid();
double CarAvatar::getKmPerLiter();
double CarAvatar::getPackerRange(int index);
PitStopTime *CarAvatar::getPitstopTime(PitStopTime *result, float fuel_requested, bool changeTyres, bool repairBody, bool repairEngine, bool repairSus, bool useRandomizer);
double CarAvatar::getRestrictor();
vec3f *CarAvatar::getRoadDirection(vec3f *result);
std::wstring *CarAvatar::getScreenName(std::wstring *result);
SetupManager *CarAvatar::getSetupManager();
unsigned int CarAvatar::getSpawnPositionIndex(std::wstring setName);
double CarAvatar::getStabilityControl();
std::vector<DebugLine> *CarAvatar::getSuspensionDebugLines(std::vector<DebugLine> *result, int index);
std::pair<unsigned int,unsigned int> *CarAvatar::getTCMode(std::pair<unsigned int,unsigned int> *result);
double CarAvatar::getTimeDifferenceOnSpline(CarAvatar *car);
TimeTransponder *CarAvatar::getTimeTransponder();
std::wstring *CarAvatar::getTyreCompound(std::wstring *result, unsigned int index, bool fullname);
int CarAvatar::getTyreCompoundIndex(unsigned int tyre_index);
double CarAvatar::getUserFFGain();
double CarAvatar::getWingAngle(int wingIndex);
void CarAvatar::goToSpawnPosition(const std::wstring *setName);
long double CarAvatar::hasPenalty();
void CarAvatar::init3D(std::wstring skin);
void CarAvatar::initCommon();
void CarAvatar::initCommonPostPhysics();
void CarAvatar::initGhostCar(bool isRecording, BOOL isPlaying);
void CarAvatar::initMirrorMaterials();
bool CarAvatar::isAbsAvailable();
bool CarAvatar::isAbsEnabled();
bool CarAvatar::isAbsInAction();
bool CarAvatar::isConnected();
bool CarAvatar::isCurrentLapValid();
bool CarAvatar::isEdlEnabled();
BOOL CarAvatar::isInPit();
bool CarAvatar::isInPitlane();
BOOL CarAvatar::isInSpawnPosition(const std::wstring *setName);
bool CarAvatar::isMinSpeedPenaltyClearDisabled();
bool CarAvatar::isRequestingPitStop();
bool CarAvatar::isTcAvailable();
bool CarAvatar::isTcEnabled();
bool CarAvatar::isTcInAction();
bool CarAvatar::isVisible();
void CarAvatar::lockControlsUntilTime(long double time, long double start, bool forceToPits);
// void __userpurge CarAvatar::makeBodyMatrix(@<ecx>, int a2@<edi>, int a3@<esi>, const mat44f *bm, mat44f *res);
double CarAvatar::modifyUserFFGain(float offset);
void CarAvatar::onNewSession();
void CarAvatar::onStartReplay(const bool *mode);
void CarAvatar::onStopReplay(const bool *mode);
INIReader *CarAvatar::openINI(INIReader *result, const std::wstring *filename);
void CarAvatar::resetFlames();
void CarAvatar::resetMultVolume();
void CarAvatar::resetPenalty(bool isTotalReset);
void CarAvatar::resetTimeTransponder();
void CarAvatar::setAbsEnabled(bool mode, bool force);
void CarAvatar::setAutoBlip(bool mode);
void CarAvatar::setAutoClutchEnabled(bool mode);
void CarAvatar::setAutoShifter(bool mode);
void CarAvatar::setBallastKG(float ballast);
void CarAvatar::setBlackFlag(PenaltyDescription descr);
void CarAvatar::setControlsLock(bool value);
void CarAvatar::setControlsProvider(ICarControlsProvider *controls);
void CarAvatar::setDamageLevel(float lvl);
void CarAvatar::setDriverInfo(const DriverInfo *info);
void CarAvatar::setFFMult(float mult);
void CarAvatar::setGentleStop(bool mode);
void CarAvatar::setGraphicsOffset(vec3f np);
void CarAvatar::setGraphicsPitchRotation(float v);
void CarAvatar::setHeadlights(bool value);
void CarAvatar::setMultVolume(int value, bool active);
void CarAvatar::setNewPhysicsState(CarPhysicsState *ps, float dt);
void CarAvatar::setP2PActivations(int activations);
void CarAvatar::setP2PStartingActivations(int pos);
void CarAvatar::setRestrictor(float v);
void CarAvatar::setSlipStreamEffects(float receive, float generationSpeedFactor);
void CarAvatar::setSpawnPositionIndex(const std::wstring *setName, int index);
void CarAvatar::setStabilityControl(float gain);
void CarAvatar::setTcEnabled(bool mode, bool force);
void CarAvatar::setTurboBoost(float value);
void CarAvatar::setTyreCompound(unsigned int index, const std::wstring *name);
void CarAvatar::setUserFFGain(float gain);
void CarAvatar::setVisible(bool vis);
// void __userpurge CarAvatar::update(@<ecx>, int a2@<edi>, int a3@<esi>, float deltaT);
void CarAvatar::updateERSCharge();
void CarAvatar::updateFromChannels(float dt);
void CarAvatar::updateInPitlaneState(float dt);
void CarAvatar::updateSkidMarks(float dt);

};